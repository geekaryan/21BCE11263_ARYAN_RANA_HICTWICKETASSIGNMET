{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sudoa\\\\OneDrive\\\\Documents\\\\codes\\\\FullStack\\\\hitwicketmanuches\\\\Manuraj_21BCE115129_Task\\\\chess_app\\\\client\\\\src\\\\Pages\\\\Game.js\",\n  _s = $RefreshSig$();\n// import io from \"socket.io-client\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Game.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  socket\n}) => {\n  _s();\n  const location = useLocation();\n  const {\n    roomName\n  } = location.state || {};\n  const [turn, setTurn] = useState(false);\n  const [id, setId] = useState(null);\n  const [grid, setGrid] = useState(null);\n  const [command, setCommand] = useState(\"\");\n  const [characters, setCharacters] = useState({\n    p1: {\n      position: [null, null],\n      alive: false\n    },\n    p2: {\n      position: [null, null],\n      alive: false\n    },\n    p3: {\n      position: [null, null],\n      alive: false\n    },\n    h1: {\n      position: [null, null],\n      alive: false\n    },\n    h2: {\n      position: [null, null],\n      alive: false\n    }\n  });\n  useEffect(() => {\n    if (roomName && !grid) socket.emit(\"get-grid\", roomName);\n    const handleGridResponse = (newGrid, newId, turnId) => {\n      if (newGrid) {\n        setGrid(newGrid);\n        setId(newId);\n        if (turnId === id) setTurn(true);\n      } else {\n        console.error(\"Received an invalid grid\");\n      }\n    };\n    socket.on(\"get-grid-res\", handleGridResponse);\n    return () => {\n      socket.off(\"get-grid-res\", handleGridResponse);\n    };\n  }, [socket, grid, id, roomName]);\n  useEffect(() => {\n    socket.on(\"move-update\", (playerId, move, turnId) => {\n      if (turnId === id) setTurn(true);\n      console.log(\"move from: \", playerId, \" is : \", move);\n      if (playerId !== id) {\n        executeMove(playerId, move);\n      }\n    });\n    return () => {\n      socket.off(\"move-update\");\n    };\n  }, [socket, id]);\n  useEffect(() => {\n    if (grid) {\n      initializeCharacters();\n    }\n  }, [grid]);\n  const initializeCharacters = () => {\n    const newCharacters = {\n      ...characters\n    };\n    grid.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell) {\n          const [cellPlayerId, charName] = cell.split(\"-\");\n          if (cellPlayerId === id) {\n            newCharacters[charName.toLowerCase()] = {\n              position: [rowIndex, cellIndex],\n              alive: true\n            };\n          }\n        }\n      });\n    });\n    setCharacters(newCharacters);\n  };\n  const handleCommand = e => {\n    e.preventDefault();\n    const newCommand = checkValidMove(command);\n    if (!(newCommand === \"\")) {\n      if (executeCommand(newCommand)) {\n        setTurn(false);\n        socket.emit(\"newMove\", newCommand, roomName);\n      } else wrongMoveHandler();\n    } else wrongMoveHandler();\n    setCommand(\"\");\n  };\n  function wrongMoveHandler() {\n    // alert(\"Wrong Move\");\n  }\n  function checkValidMove(input) {\n    input = input.replace(/\\s+/g, \"\");\n    input = input.toLowerCase();\n    const [characterName, move] = input.split(\":\");\n    const character = characters[characterName];\n    if (!character || !character.alive) {\n      if (!character) alert(\"wrong character name\");else alert(\"Dead !\");\n      return \"\";\n    }\n    const validMoves = {\n      p1: [\"l\", \"r\", \"f\", \"b\"],\n      p2: [\"l\", \"r\", \"f\", \"b\"],\n      p3: [\"l\", \"r\", \"f\", \"b\"],\n      h1: [\"l\", \"r\", \"f\", \"b\"],\n      h2: [\"fl\", \"fr\", \"bl\", \"br\"]\n    };\n    if (!validMoves[characterName].includes(move)) {\n      alert(\"Invalid move\");\n      return \"\";\n    }\n    let reverse = input;\n    if (id === \"B\") {\n      reverse = input.split(\"\").map(char => {\n        if (char === \"l\") return \"r\";\n        if (char === \"r\") return \"l\";\n        if (char === \"f\") return \"b\";\n        if (char === \"b\") return \"f\";\n        return char;\n      }).join(\"\");\n      input = reverse;\n    }\n    return input;\n  }\n  function executeCommand(command) {\n    let isValid = 1;\n    const [characterName, move] = command.split(\":\");\n    const character = characters[characterName];\n    let [x, y] = character.position;\n    let newX = x;\n    let newY = y;\n    switch (move) {\n      case \"l\":\n        newY -= 1;\n        break;\n      case \"r\":\n        newY += 1;\n        break;\n      case \"f\":\n        newX -= 1;\n        break;\n      case \"b\":\n        newX += 1;\n        break;\n      case \"fl\":\n        newX -= 2;\n        newY -= 2;\n        break;\n      case \"fr\":\n        newX -= 2;\n        newY += 2;\n        break;\n      case \"bl\":\n        newX += 2;\n        newY -= 2;\n        break;\n      case \"br\":\n        newX += 2;\n        newY += 2;\n        break;\n      default:\n        return false;\n    }\n    if (characterName === \"h1\") {\n      switch (move) {\n        case \"l\":\n          newY -= 1;\n          break;\n        case \"r\":\n          newY += 1;\n          break;\n        case \"f\":\n          newX -= 1;\n          break;\n        case \"b\":\n          newX += 1;\n          break;\n        default:\n          return false;\n      }\n    }\n    if (newX < 0 || newX >= 5 || newY < 0 || newY >= 5) {\n      alert(\"Out of range\");\n      return false;\n    }\n    let i = x;\n    let j = y;\n    while (x !== newX || y !== newY) {\n      if (x < newX) x++;else if (x > newX) x--;\n      if (y > newY) y--;else if (y < newY) y++;\n      if (grid[x][y] && grid[x][y].startsWith(id)) {\n        alert(\"Cant kill own characters\", grid[x][y]);\n        isValid = 0;\n        break;\n      }\n    }\n    if (!isValid) {\n      return false;\n    } else {\n      x = i;\n      y = j;\n      let prevCellValue = grid[x][y];\n      grid[x][y] = \"x\";\n      while (x !== newX || y !== newY) {\n        if (x < newX) x++;else if (x > newX) x--;\n        if (y > newY) y--;else if (y < newY) y++;\n        grid[x][y] = \"x\";\n      }\n      grid[newX][newY] = prevCellValue;\n      setGrid([...grid]);\n      characters[characterName].position = [newX, newY];\n      return true;\n    }\n  }\n  function executeMove(playerId, move) {\n    if (!grid) return; // Ensure grid is not null\n\n    let [characterName, direction] = move.split(\":\");\n    let targetCharacter = `${playerId}-${characterName}`;\n    targetCharacter = targetCharacter.toUpperCase();\n    direction = direction.toLowerCase();\n    let x, y;\n\n    // Find the character's current position in the grid\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === targetCharacter) {\n          x = i;\n          y = j;\n          break;\n        }\n      }\n    }\n    let newX = x;\n    let newY = y;\n    switch (direction) {\n      case \"l\":\n        newY -= 1;\n        break;\n      case \"r\":\n        newY += 1;\n        break;\n      case \"f\":\n        newX -= 1;\n        break;\n      case \"b\":\n        newX += 1;\n        break;\n      case \"fl\":\n        newX -= 2;\n        newY -= 2;\n        break;\n      case \"fr\":\n        newX -= 2;\n        newY += 2;\n        break;\n      case \"bl\":\n        newX += 2;\n        newY -= 2;\n        break;\n      case \"br\":\n        newX += 2;\n        newY += 2;\n        break;\n      default:\n        return false;\n    }\n    if (characterName.toLowerCase() === \"h1\") {\n      switch (direction) {\n        case \"l\":\n          newY -= 1;\n          break;\n        case \"r\":\n          newY += 1;\n          break;\n        case \"f\":\n          newX -= 1;\n          break;\n        case \"b\":\n          newX += 1;\n          break;\n        default:\n          return false;\n      }\n    }\n    if (newX >= 0 && newX < 5 && newY >= 0 && newY < 5) {\n      grid[x][y] = \"x\";\n      while (x !== newX || y !== newY) {\n        if (x < newX) x++;else if (x > newX) x--;\n        if (y > newY) y--;else if (y < newY) y++;\n        if (grid[x][y].startsWith(id)) {\n          let [playerIdd, deadCharacterName] = grid[x][y].split(\"-\");\n          deadCharacterName = deadCharacterName.toLowerCase();\n          characters[deadCharacterName].alive = 0;\n        }\n        grid[x][y] = \"x\";\n      }\n      grid[newX][newY] = targetCharacter;\n      setGrid([...grid]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Hi \", socket.id, \" !\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"welcome to room: \", roomName, \" as \", id === \"V\" ? \"Guest\" : id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), grid ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: (id === \"B\" ? [...grid].reverse() : grid).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: (id === \"B\" ? [...row].reverse() : row).map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell\",\n          children: cell\n        }, cellIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 19\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }, this), turn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: command,\n        onChange: e => setCommand(e.target.value),\n        placeholder: \"Enter your move\",\n        className: \"command-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCommand,\n        className: \"submit-button\",\n        children: \"Submit Move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"2Nb0b3kBKNz5UbqW7EOtNNMCAxs=\", false, function () {\n  return [useLocation];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","useEffect","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","socket","_s","location","roomName","state","turn","setTurn","id","setId","grid","setGrid","command","setCommand","characters","setCharacters","p1","position","alive","p2","p3","h1","h2","emit","handleGridResponse","newGrid","newId","turnId","console","error","on","off","playerId","move","log","executeMove","initializeCharacters","newCharacters","forEach","row","rowIndex","cell","cellIndex","cellPlayerId","charName","split","toLowerCase","handleCommand","e","preventDefault","newCommand","checkValidMove","executeCommand","wrongMoveHandler","input","replace","characterName","character","alert","validMoves","includes","reverse","map","char","join","isValid","x","y","newX","newY","i","j","startsWith","prevCellValue","direction","targetCharacter","toUpperCase","length","playerIdd","deadCharacterName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sudoa/OneDrive/Documents/codes/FullStack/hitwicketmanuches/Manuraj_21BCE115129_Task/chess_app/client/src/Pages/Game.js"],"sourcesContent":["// import io from \"socket.io-client\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Game.css\";\r\n\r\nconst Game = ({ socket }) => {\r\n  const location = useLocation();\r\n  const { roomName } = location.state || {};\r\n\r\n  const [turn, setTurn] = useState(false);\r\n  const [id, setId] = useState(null);\r\n  const [grid, setGrid] = useState(null);\r\n  const [command, setCommand] = useState(\"\");\r\n  const [characters, setCharacters] = useState({\r\n    p1: { position: [null, null], alive: false },\r\n    p2: { position: [null, null], alive: false },\r\n    p3: { position: [null, null], alive: false },\r\n    h1: { position: [null, null], alive: false },\r\n    h2: { position: [null, null], alive: false },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (roomName && !grid) socket.emit(\"get-grid\", roomName);\r\n\r\n    const handleGridResponse = (newGrid, newId, turnId) => {\r\n      if (newGrid) {\r\n        setGrid(newGrid);\r\n        setId(newId);\r\n        if (turnId === id) setTurn(true);\r\n      } else {\r\n        console.error(\"Received an invalid grid\");\r\n      }\r\n    };\r\n\r\n    socket.on(\"get-grid-res\", handleGridResponse);\r\n\r\n    return () => {\r\n      socket.off(\"get-grid-res\", handleGridResponse);\r\n    };\r\n  }, [socket, grid, id, roomName]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"move-update\", (playerId, move, turnId) => {\r\n      if (turnId === id) setTurn(true);\r\n      console.log(\"move from: \", playerId, \" is : \", move);\r\n      if (playerId !== id) {\r\n        executeMove(playerId, move);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"move-update\");\r\n    };\r\n  }, [socket, id]);\r\n\r\n  useEffect(() => {\r\n    if (grid) {\r\n      initializeCharacters();\r\n    }\r\n  }, [grid]);\r\n\r\n  const initializeCharacters = () => {\r\n    const newCharacters = { ...characters };\r\n    grid.forEach((row, rowIndex) => {\r\n      row.forEach((cell, cellIndex) => {\r\n        if (cell) {\r\n          const [cellPlayerId, charName] = cell.split(\"-\");\r\n          if (cellPlayerId === id) {\r\n            newCharacters[charName.toLowerCase()] = {\r\n              position: [rowIndex, cellIndex],\r\n              alive: true,\r\n            };\r\n          }\r\n        }\r\n      });\r\n    });\r\n    setCharacters(newCharacters);\r\n  };\r\n\r\n  const handleCommand = (e) => {\r\n    e.preventDefault();\r\n    const newCommand = checkValidMove(command);\r\n    if (!(newCommand === \"\")) {\r\n      if (executeCommand(newCommand)) {\r\n        setTurn(false);\r\n        socket.emit(\"newMove\", newCommand, roomName);\r\n      } else wrongMoveHandler();\r\n    } else wrongMoveHandler();\r\n    setCommand(\"\");\r\n  };\r\n\r\n  function wrongMoveHandler() {\r\n    // alert(\"Wrong Move\");\r\n  }\r\n\r\n  function checkValidMove(input) {\r\n    input = input.replace(/\\s+/g, \"\");\r\n    input = input.toLowerCase();\r\n    const [characterName, move] = input.split(\":\");\r\n\r\n    const character = characters[characterName];\r\n\r\n    if (!character || !character.alive) {\r\n      if (!character) alert(\"wrong character name\");\r\n      else alert(\"Dead !\");\r\n      return \"\";\r\n    }\r\n\r\n    const validMoves = {\r\n      p1: [\"l\", \"r\", \"f\", \"b\"],\r\n      p2: [\"l\", \"r\", \"f\", \"b\"],\r\n      p3: [\"l\", \"r\", \"f\", \"b\"],\r\n      h1: [\"l\", \"r\", \"f\", \"b\"],\r\n      h2: [\"fl\", \"fr\", \"bl\", \"br\"],\r\n    };\r\n\r\n    if (!validMoves[characterName].includes(move)) {\r\n      alert(\"Invalid move\");\r\n      return \"\";\r\n    }\r\n\r\n    let reverse = input;\r\n    if (id === \"B\") {\r\n      reverse = input\r\n        .split(\"\")\r\n        .map((char) => {\r\n          if (char === \"l\") return \"r\";\r\n          if (char === \"r\") return \"l\";\r\n          if (char === \"f\") return \"b\";\r\n          if (char === \"b\") return \"f\";\r\n          return char;\r\n        })\r\n        .join(\"\");\r\n      input = reverse;\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  function executeCommand(command) {\r\n    let isValid = 1;\r\n    const [characterName, move] = command.split(\":\");\r\n    const character = characters[characterName];\r\n    let [x, y] = character.position;\r\n    let newX = x;\r\n    let newY = y;\r\n\r\n    switch (move) {\r\n      case \"l\":\r\n        newY -= 1;\r\n        break;\r\n      case \"r\":\r\n        newY += 1;\r\n        break;\r\n      case \"f\":\r\n        newX -= 1;\r\n        break;\r\n      case \"b\":\r\n        newX += 1;\r\n        break;\r\n      case \"fl\":\r\n        newX -= 2;\r\n        newY -= 2;\r\n        break;\r\n      case \"fr\":\r\n        newX -= 2;\r\n        newY += 2;\r\n        break;\r\n      case \"bl\":\r\n        newX += 2;\r\n        newY -= 2;\r\n        break;\r\n      case \"br\":\r\n        newX += 2;\r\n        newY += 2;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    if (characterName === \"h1\") {\r\n      switch (move) {\r\n        case \"l\":\r\n          newY -= 1;\r\n          break;\r\n        case \"r\":\r\n          newY += 1;\r\n          break;\r\n        case \"f\":\r\n          newX -= 1;\r\n          break;\r\n        case \"b\":\r\n          newX += 1;\r\n          break;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    if (newX < 0 || newX >= 5 || newY < 0 || newY >= 5) {\r\n      alert(\"Out of range\");\r\n      return false;\r\n    }\r\n\r\n    let i = x;\r\n    let j = y;\r\n    while (x !== newX || y !== newY) {\r\n      if (x < newX) x++;\r\n      else if (x > newX) x--;\r\n\r\n      if (y > newY) y--;\r\n      else if (y < newY) y++;\r\n\r\n      if (grid[x][y] && grid[x][y].startsWith(id)) {\r\n        alert(\"Cant kill own characters\", grid[x][y]);\r\n        isValid = 0;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!isValid) {\r\n      return false;\r\n    } else {\r\n      x = i;\r\n      y = j;\r\n      let prevCellValue = grid[x][y];\r\n      grid[x][y] = \"x\";\r\n      while (x !== newX || y !== newY) {\r\n        if (x < newX) x++;\r\n        else if (x > newX) x--;\r\n        if (y > newY) y--;\r\n        else if (y < newY) y++;\r\n        grid[x][y] = \"x\";\r\n      }\r\n      grid[newX][newY] = prevCellValue;\r\n      setGrid([...grid]);\r\n      characters[characterName].position = [newX, newY];\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function executeMove(playerId, move) {\r\n    if (!grid) return; // Ensure grid is not null\r\n\r\n    let [characterName, direction] = move.split(\":\");\r\n    let targetCharacter = `${playerId}-${characterName}`;\r\n    targetCharacter = targetCharacter.toUpperCase();\r\n    direction = direction.toLowerCase();\r\n\r\n    let x, y;\r\n\r\n    // Find the character's current position in the grid\r\n    for (let i = 0; i < grid.length; i++) {\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        if (grid[i][j] === targetCharacter) {\r\n          x = i;\r\n          y = j;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let newX = x;\r\n    let newY = y;\r\n\r\n    switch (direction) {\r\n      case \"l\":\r\n        newY -= 1;\r\n        break;\r\n      case \"r\":\r\n        newY += 1;\r\n        break;\r\n      case \"f\":\r\n        newX -= 1;\r\n        break;\r\n      case \"b\":\r\n        newX += 1;\r\n        break;\r\n      case \"fl\":\r\n        newX -= 2;\r\n        newY -= 2;\r\n        break;\r\n      case \"fr\":\r\n        newX -= 2;\r\n        newY += 2;\r\n        break;\r\n      case \"bl\":\r\n        newX += 2;\r\n        newY -= 2;\r\n        break;\r\n      case \"br\":\r\n        newX += 2;\r\n        newY += 2;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    if (characterName.toLowerCase() === \"h1\") {\r\n      switch (direction) {\r\n        case \"l\":\r\n          newY -= 1;\r\n          break;\r\n        case \"r\":\r\n          newY += 1;\r\n          break;\r\n        case \"f\":\r\n          newX -= 1;\r\n          break;\r\n        case \"b\":\r\n          newX += 1;\r\n          break;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    if (newX >= 0 && newX < 5 && newY >= 0 && newY < 5) {\r\n      grid[x][y] = \"x\";\r\n\r\n      while (x !== newX || y !== newY) {\r\n        if (x < newX) x++;\r\n        else if (x > newX) x--;\r\n        if (y > newY) y--;\r\n        else if (y < newY) y++;\r\n        if (grid[x][y].startsWith(id)) {\r\n          let [playerIdd, deadCharacterName] = grid[x][y].split(\"-\");\r\n          deadCharacterName = deadCharacterName.toLowerCase();\r\n          characters[deadCharacterName].alive = 0;\r\n        }\r\n        grid[x][y] = \"x\";\r\n      }\r\n\r\n      grid[newX][newY] = targetCharacter;\r\n      setGrid([...grid]);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h2>Hi {socket.id} !</h2>\r\n      <h3>\r\n        welcome to room: {roomName} as {id === \"V\" ? \"Guest\" : id}\r\n      </h3>\r\n\r\n      {grid ? (\r\n        <div className=\"grid-container\">\r\n          {(id === \"B\" ? [...grid].reverse() : grid).map((row, rowIndex) => (\r\n            <div className=\"grid-row\" key={rowIndex}>\r\n              {(id === \"B\" ? [...row].reverse() : row).map(\r\n                (cell, cellIndex) => (\r\n                  <div className=\"grid-cell\" key={cellIndex}>\r\n                    {cell}\r\n                  </div>\r\n                )\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n      {turn ? (\r\n        <div className=\"input-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={command}\r\n            onChange={(e) => setCommand(e.target.value)}\r\n            placeholder=\"Enter your move\"\r\n            className=\"command-input\"\r\n          />\r\n          <button onClick={handleCommand} className=\"submit-button\">\r\n            Submit Move\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}